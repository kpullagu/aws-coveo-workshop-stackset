AWSTemplateFormatVersion: '2010-09-09'
Description: 'StackSet Layer 2: Core Infrastructure - Cognito, API Gateway, Lambda Functions'

Parameters:
  StackPrefix:
    Type: String
    Default: workshop
    Description: Prefix for all resources
  
  MasterAccountId:
    Type: String
    Description: AWS Account ID of the master account (for ECR cross-account access)
  
  Environment:
    Type: String
    Default: workshop
    Description: Environment name
  
  CoveoOrgId:
    Type: String
    Description: Coveo organization ID
  
  CoveoAnswerConfigId:
    Type: String
    Description: Coveo Answer API configuration ID
  
  SharedLambdaLayerArn:
    Type: String
    Description: Shared Lambda Layer ARN from master account (e.g., arn:aws:lambda:region:ACCOUNT_ID:layer:workshop-shared-dependencies:1)

Conditions:
  HasSharedLayer: !Not [!Equals [!Ref SharedLambdaLayerArn, '']]

Resources:
  # ==========================================
  # Cognito User Pool
  # ==========================================
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${StackPrefix}-${AWS::AccountId}-user-pool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: false
          Mutable: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${StackPrefix}-web-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - 'http://localhost:3000'
      LogoutURLs:
        - 'http://localhost:3000'
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${StackPrefix}-${AWS::AccountId}'
      UserPoolId: !Ref UserPool

  # ==========================================
  # SSM Parameters for Cognito
  # ==========================================
  
  UserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${StackPrefix}/coveo/user-pool-id'
      Type: String
      Value: !Ref UserPool
      Description: Cognito User Pool ID

  ClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${StackPrefix}/coveo/client-id'
      Type: String
      Value: !Ref UserPoolClient
      Description: Cognito User Pool Client ID

  DomainParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${StackPrefix}/coveo/cognito-domain'
      Type: String
      Value: !Sub '${StackPrefix}-${AWS::AccountId}'
      Description: Cognito Hosted UI domain prefix

  # ==========================================
  # IAM Roles for Lambda Functions
  # ==========================================

  SearchProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-search-proxy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  PassagesProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-passages-proxy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  AnsweringProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-answering-proxy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  QuerySuggestProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-query-suggest-proxy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  HtmlProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-html-proxy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  PassageToolRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-passage-tool-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'

  AgentCoreRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-agentcore-runtime-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - bedrock.amazonaws.com
                - bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadSSMParameters
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/*'
        - PolicyName: AgentCoreRuntimePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${MasterAccountId}:repository/${StackPrefix}-coveo-mcp-server-master'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${MasterAccountId}:repository/${StackPrefix}-ui-master'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${MasterAccountId}:repository/${StackPrefix}-coveo-agent-master'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock-agentcore/*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock/modelinvocations/*'
              - Effect: Allow
                Action:
                  - bedrock-agentcore:InvokeAgentRuntime
                Resource: !Sub 'arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/*'
        - PolicyName: AgentCoreRuntimeXRay
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'

  BedrockAgentChatRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackPrefix}-bedrock-agent-chat-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InvokeBedrockAgent
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agent-runtime:InvokeAgent
                  - bedrock:InvokeAgent
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/coveo/agent-id'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/coveo/agent-alias-id'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/coveo/org-id'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/coveo/search-api-key'

  # ==========================================
  # Lambda Functions
  # ==========================================

  SearchProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-search-proxy'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt SearchProxyRole.Arn
      Timeout: 30
      MemorySize: 512
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          COVEO_SEARCH_HUB: 'aws-workshop'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/search_proxy.zip

  PassagesProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-passages-proxy'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PassagesProxyRole.Arn
      Timeout: 30
      MemorySize: 256
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          COVEO_SEARCH_HUB: 'aws-workshop'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/passages_proxy.zip

  AnsweringProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-answering-proxy'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AnsweringProxyRole.Arn
      Timeout: 60
      MemorySize: 512
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_ANSWER_CONFIG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/answer-config-id}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          COVEO_SEARCH_HUB: 'aws-workshop'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/answering_proxy.zip

  QuerySuggestProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-query-suggest-proxy'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt QuerySuggestProxyRole.Arn
      Timeout: 30
      MemorySize: 256
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          COVEO_SEARCH_HUB: 'aws-workshop'
          COVEO_PIPELINE: 'aws-workshop-pipeline'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/query_suggest_proxy.zip

  HtmlProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-html-proxy'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt HtmlProxyRole.Arn
      Timeout: 30
      MemorySize: 256
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/html_proxy.zip

  PassageToolFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-passage-tool'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PassageToolRole.Arn
      Timeout: 30
      MemorySize: 256
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
          COVEO_PLATFORM_URL: 'https://platform.cloud.coveo.com'
          COVEO_SEARCH_HUB: 'aws-workshop'
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/coveo_passage_tool_py.zip

  AgentCoreRuntimeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-agentcore-runtime'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AgentCoreRuntimeRole.Arn
      Timeout: 300
      MemorySize: 512
      TracingConfig:
        Mode: Active  # Enable X-Ray tracing for observability
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          LOG_LEVEL: INFO
          # IMPORTANT: Lambda calls AGENT Runtime (workshop_CoveoAgent), NOT MCP Runtime
          # The SSM parameter "runtime-arn" contains the AGENT Runtime ARN
          # Flow: Lambda → Agent Runtime (runtime-arn) → MCP Runtime (mcp-runtime-arn) → Coveo API
          # Agent Runtime ARN will be seeded after Layer 3 deployment
          # Lambda code reads from SSM: /${StackPrefix}/coveo/runtime-arn (which is Agent Runtime ARN)
          AGENTCORE_RUNTIME_ARN_PARAM: !Sub '/${StackPrefix}/coveo/runtime-arn'
          COVEO_ORG_ID: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/org-id}}'
          COVEO_SEARCH_API_KEY: !Sub '{{resolve:ssm:/${StackPrefix}/coveo/search-api-key}}'
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/agentcore_runtime_py.zip

  BedrockAgentChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${StackPrefix}-bedrock-agent-chat'
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt BedrockAgentChatRole.Arn
      Timeout: 60
      MemorySize: 512
      Layers: !If
        - HasSharedLayer
        - [!Ref SharedLambdaLayerArn]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          STACK_PREFIX: !Ref StackPrefix
          LOG_LEVEL: INFO
      Code:
        S3Bucket: !Sub '${StackPrefix}-${AWS::AccountId}-cfn-templates'
        S3Key: lambdas/bedrock_agent_chat.zip

  # ==========================================
  # CloudWatch Log Groups for Lambda Functions
  # ==========================================

  SearchProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SearchProxyFunction}'
      RetentionInDays: 7

  PassagesProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PassagesProxyFunction}'
      RetentionInDays: 7

  AnsweringProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AnsweringProxyFunction}'
      RetentionInDays: 7

  QuerySuggestProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${QuerySuggestProxyFunction}'
      RetentionInDays: 7

  HtmlProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HtmlProxyFunction}'
      RetentionInDays: 7

  PassageToolLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PassageToolFunction}'
      RetentionInDays: 7

  AgentCoreRuntimeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AgentCoreRuntimeFunction}'
      RetentionInDays: 7

  BedrockAgentChatLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${BedrockAgentChatFunction}'
      RetentionInDays: 7

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${StackPrefix}-api'
      RetentionInDays: 7

  # ==========================================
  # API Gateway HTTP API
  # ==========================================

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${StackPrefix}-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
        MaxAge: 300

  HttpApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      AutoDeploy: true

  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub '${StackPrefix}-cognito-authorizer'
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
      # Note: API Gateway JWT authorizer validates 'aud' claim for ID tokens
      # For ACCESS tokens (which have 'client_id' instead of 'aud'), we rely on
      # the issuer validation and signature verification

  # API Routes
  SearchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /search'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${SearchIntegration}'

  SearchIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SearchProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  SearchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SearchProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  PassagesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /passages'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${PassagesIntegration}'

  PassagesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt PassagesProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  PassagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PassagesProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  AnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /answer'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${AnswerIntegration}'

  AnswerIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AnsweringProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  AnswerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AnsweringProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /chat'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${ChatIntegration}'

  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AnsweringProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  ChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AnsweringProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # Health Check Route (no auth)
  HealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /health'
      Target: !Sub 'integrations/${HealthIntegration}'

  HealthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SearchProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  HealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SearchProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # Answering Route
  AnsweringRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /answering'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${AnsweringIntegration}'

  AnsweringIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AnsweringProxyFunction.Arn
      PayloadFormatVersion: '2.0'

  AnsweringPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AnsweringProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # Query Suggest Route
  QuerySuggestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /QuerySuggest'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${QuerySuggestIntegration}'

  QuerySuggestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuerySuggestProxyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  QuerySuggestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QuerySuggestProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # HTML Route
  HtmlRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /html'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${HtmlIntegration}'

  HtmlIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HtmlProxyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  HtmlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HtmlProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # AgentCore Runtime Route (for MCP protocol communication)
  AgentCoreRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /agentcore'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${AgentCoreIntegration}'

  AgentCoreIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AgentCoreRuntimeFunction.Arn
      PayloadFormatVersion: '2.0'

  AgentCorePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentCoreRuntimeFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # Bedrock Agent Chat Route (for multi-turn conversations)
  BedrockAgentChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /bedrock-agent-chat'
      AuthorizationType: JWT
      AuthorizerId: !Ref CognitoAuthorizer
      Target: !Sub 'integrations/${BedrockAgentChatIntegration}'

  BedrockAgentChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockAgentChatFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  BedrockAgentChatPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAgentChatFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'

  # Additional API Gateway outputs
  ApiBaseUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${StackPrefix}/coveo/api-base-url'
      Type: String
      Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
  
  ApiGatewayUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${StackPrefix}/coveo/api-gateway-url'
      Type: String
      Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
      Description: API Gateway URL for frontend
      Description: API Gateway base URL

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${StackPrefix}-UserPoolId'
  
  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${StackPrefix}-UserPoolArn'
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${StackPrefix}-UserPoolClientId'
  
  AgentCoreRuntimeRoleArn:
    Description: AgentCore Runtime IAM Role ARN
    Value: !GetAtt AgentCoreRuntimeRole.Arn
    Export:
      Name: !Sub '${StackPrefix}-AgentCoreRuntimeRoleArn'
  
  PassageToolArn:
    Description: Passage Tool Lambda ARN
    Value: !GetAtt PassageToolFunction.Arn
    Export:
      Name: !Sub '${StackPrefix}-PassageToolArn'
  
  ApiBaseUrl:
    Description: API Gateway base URL
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${StackPrefix}-ApiBaseUrl'
