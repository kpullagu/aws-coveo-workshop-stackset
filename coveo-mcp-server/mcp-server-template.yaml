AWSTemplateFormatVersion: "2010-09-09"
Description: "MCP Server on AgentCore Runtime - Deploy an MCP server with custom tools (add_numbers, multiply_numbers, greet_user)"

# ============================================================================
# PARAMETERS SECTION
# ============================================================================
Parameters:
  # Stack Configuration
  StackPrefix:
    Type: String
    Default: workshop
    Description: Prefix for SSM parameter paths and resource naming
    AllowedPattern: ^[a-z0-9-]+$
    ConstraintDescription: Must contain only lowercase letters, numbers, and hyphens

  # Coveo Configuration
  CoveoOrgId:
    Type: String
    Default: your-coveo-org-id
    Description: Coveo Organization ID
  
  CoveoSearchApiKey:
    Type: String
    NoEcho: true
    Default: xx00000000-0000-0000-0000-000000000000
    Description: Coveo Search API Key (will be stored as SecureString in SSM)
  
  CoveoAnswerConfigId:
    Type: String
    Default: 00000000-0000-0000-0000-000000000000
    Description: Coveo Answer Configuration ID
  
  CoveoPlatformUrl:
    Type: String
    Default: https://platform.cloud.coveo.com
    Description: Coveo Platform Base URL
  
  CoveoSearchHub:
    Type: String
    Default: aws-workshop
    Description: Coveo Search Hub
  
  CoveoPipeline:
    Type: String
    Default: aws-workshop-pipeline
    Description: Coveo Search Pipeline

  # Agent Configuration
  AgentName:
    Type: String
    Default: "coveo_mcp_tool_runtime"
    Description: "Name for the MCP server runtime"
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9_]{0,47}$"
    ConstraintDescription: "Must start with a letter, max 48 characters, alphanumeric and underscores only"

  # Container Configuration
  ImageUri:
    Type: String
    Description: "ECR image URI (e.g., 123456789.dkr.ecr.us-east-1.amazonaws.com/repo:tag)"

  # Cognito Configuration (from main stack)
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID from main workshop stack
  
  CognitoUserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID from main workshop stack

  # Network Configuration
  NetworkMode:
    Type: String
    Default: "PUBLIC"
    Description: "Network mode for AgentCore resources"
    AllowedValues:
      - PUBLIC
      - PRIVATE

  # ECR Configuration
  ECRRepositoryName:
    Type: String
    Default: "mcp-server"
    Description: "Name of the ECR repository"

# ============================================================================
# METADATA SECTION
# ============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Stack Configuration"
        Parameters:
          - StackPrefix
      - Label:
          default: "Coveo Configuration"
        Parameters:
          - CoveoOrgId
          - CoveoSearchApiKey
          - CoveoAnswerConfigId
          - CoveoPlatformUrl
          - CoveoSearchHub
          - CoveoPipeline
      - Label:
          default: "Agent Configuration"
        Parameters:
          - AgentName
          - NetworkMode
      - Label:
          default: "Container Configuration"
        Parameters:
          - ECRRepositoryName
          - ImageUri
    ParameterLabels:
      StackPrefix:
        default: "Stack Prefix (for SSM paths)"
      CoveoOrgId:
        default: "Coveo Organization ID"
      CoveoSearchApiKey:
        default: "Coveo Search API Key"
      CoveoAnswerConfigId:
        default: "Coveo Answer Config ID"
      CoveoPlatformUrl:
        default: "Coveo Platform URL"
      CoveoSearchHub:
        default: "Coveo Search Hub"
      CoveoPipeline:
        default: "Coveo Pipeline"
      AgentName:
        default: "Agent Name"
      NetworkMode:
        default: "Network Mode"
      ECRRepositoryName:
        default: "ECR Repository Name"
      ImageUri:
        default: "ECR Image URI"

# ============================================================================
# CONDITIONS SECTION
# ============================================================================
# No conditions needed - MCP Runtime is always created

# ============================================================================
# RESOURCES SECTION
# ============================================================================
Resources:
  # ========================================================================
  # ECR MODULE - Container Registry
  # ========================================================================
  # Note: ECR Repository is created by deploy script, not by CloudFormation
  # This allows the image to be built and pushed before the stack is created

  # ========================================================================
  # COGNITO MODULE - Using existing Cognito from main workshop stack
  # ========================================================================
  # Note: Cognito User Pool and Client are created by the main workshop stack
  # and passed as parameters (CognitoUserPoolId, CognitoUserPoolClientId)

  # ========================================================================
  # SSM PARAMETER STORE MODULE - Configuration Storage
  # ========================================================================

  CoveoSearchApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/coveo/search-api-key"
      Description: !Sub "Coveo Search API Key for ${AWS::StackName}"
      Type: String
      Value: !Ref CoveoSearchApiKey
      Tags:
        StackName: !Ref AWS::StackName
        Module: SSM

  CoveoOrgIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/coveo/org-id"
      Description: !Sub "Coveo Organization ID for ${AWS::StackName}"
      Type: String
      Value: !Ref CoveoOrgId
      Tags:
        StackName: !Ref AWS::StackName
        Module: SSM

  CoveoAnswerConfigIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/coveo/answer-config-id"
      Description: !Sub "Coveo Answer Configuration ID for ${AWS::StackName}"
      Type: String
      Value: !Ref CoveoAnswerConfigId
      Tags:
        StackName: !Ref AWS::StackName
        Module: SSM

  # ========================================================================
  # IAM MODULE - Security and Permissions
  # ========================================================================

  # Agent Execution Role
  AgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-agent-execution-role"
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/solution-engineer-boundary'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AssumeRolePolicy
            Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/BedrockAgentCoreFullAccess
      Policies:
        - PolicyName: AgentCoreExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRImageAccess
                Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}"
              - Sid: ECRTokenAccess
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: XRayTracing
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
              - Sid: CloudWatchMetrics
                Effect: Allow
                Resource: "*"
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    cloudwatch:namespace: bedrock-agentcore
              - Sid: SSMParameterAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${StackPrefix}/coveo/*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-agent-execution-role"
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Module
          Value: IAM




  # ========================================================================
  # CloudWatch Log Group for MCP Server
  # ========================================================================
  
  MCPServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock-agentcore/runtimes/${StackPrefix}_Coveo_MCPServer_Tools'
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-mcp-server-logs'
        - Key: Purpose
          Value: 'MCP Server Application Logs'

  # ========================================================================
  # AGENTCORE MODULE - MCP Server Runtime
  # ========================================================================

  MCPServerRuntime:
    Type: AWS::BedrockAgentCore::Runtime
    DependsOn: MCPServerLogGroup
    Properties:
      AgentRuntimeName: !Sub "${StackPrefix}_Coveo_MCPServer_Tools"
      AgentRuntimeArtifact:
        ContainerConfiguration:
          ContainerUri: !Ref ImageUri
      RoleArn: !GetAtt AgentExecutionRole.Arn
      NetworkConfiguration:
        NetworkMode: !Ref NetworkMode
      ProtocolConfiguration: MCP
      Description: !Sub "MCP server runtime for ${AWS::StackName} - IAM authentication"

# ============================================================================
# OUTPUTS SECTION
# ============================================================================
Outputs:
  # AGENTCORE MODULE OUTPUTS
  MCPServerRuntimeId:
    Description: "ID of the created MCP server runtime"
    Value: !GetAtt MCPServerRuntime.AgentRuntimeId
    Export:
      Name: !Sub "${AWS::StackName}-MCPServerRuntimeId"

  MCPServerRuntimeArn:
    Description: "ARN of the created MCP server runtime"
    Value: !GetAtt MCPServerRuntime.AgentRuntimeArn
    Export:
      Name: !Sub "${AWS::StackName}-MCPServerRuntimeArn"

  MCPServerInvocationURL:
    Description: "URL to invoke the MCP server"
    Value: !Sub
      - "https://bedrock-agentcore.${AWS::Region}.amazonaws.com/runtimes/${EncodedArn}/invocations?qualifier=DEFAULT"
      - EncodedArn: !Join
          - ""
          - - !Select [0, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%3A"
            - !Select [1, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%3A"
            - !Select [2, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%3A"
            - !Select [3, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%3A"
            - !Select [4, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%3A"
            - !Select [5, !Split [":", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
            - "%2F"
            - !Select [1, !Split ["/", !GetAtt MCPServerRuntime.AgentRuntimeArn]]
    Export:
      Name: !Sub "${AWS::StackName}-MCPServerInvocationURL"

  # ECR OUTPUTS
  # Note: ECR repository is created by deploy script, not CloudFormation

  # IAM OUTPUTS
  AgentExecutionRoleArn:
    Description: "ARN of the agent execution role"
    Value: !GetAtt AgentExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AgentExecutionRoleArn"

  # COGNITO INFO (from main stack)
  CognitoUserPoolIdUsed:
    Description: "Cognito User Pool ID (from main workshop stack)"
    Value: !Ref CognitoUserPoolId

  CognitoUserPoolClientIdUsed:
    Description: "Cognito User Pool Client ID (from main workshop stack)"
    Value: !Ref CognitoUserPoolClientId

  CognitoDiscoveryUrl:
    Description: "Cognito OIDC Discovery URL"
    Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolId}/.well-known/openid-configuration"

  # AUTHENTICATION INFO (from main stack)
  TestUsername:
    Description: "Test username for authentication (created by main stack)"
    Value: "testuser@example.com"

  TestPassword:
    Description: "Test password for authentication (created by main stack)"
    Value: "TempPassword123!"